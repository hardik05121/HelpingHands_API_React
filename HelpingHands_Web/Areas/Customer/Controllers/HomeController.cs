using AutoMapper;using HelpingHands_Utility;using HelpingHands_Web.Models;using HelpingHands_Web.Models.DTO;using HelpingHands_Web.Models.VM;using HelpingHands_Web.Service;using HelpingHands_Web.Service.IService;using Microsoft.AspNetCore.Mvc;using Newtonsoft.Json;using System.Collections;using System.Collections.Generic;using System.Diagnostics;using static System.Net.Mime.MediaTypeNames;namespace HelpingHands_Web.Areas.Customer.Controllers{    [Area("Customer")]    public class HomeController : Controller    {        private readonly ILogger<HomeController> _logger;        private readonly ISecondCategoryService _secondService;        private readonly ICompanyService _companyService;        private readonly IFirstCategoryService _firstService;        private readonly IThirdCategoryService _thirdService;        private readonly ICountryService _countryService;
        private readonly ICompanyXAmenityService _companyXAmenityService;        private readonly ICompanyXPaymentService _companyXPaymentService;        private readonly ICompanyXServiceService _companyXServiceService;        private readonly IReviewService _reviewService;        private readonly IReviewXCommentService _reviewXCommentService;        private readonly IStateService _stateService;        private readonly ICityService _cityService;        private readonly ICompanyImageService _companyImageService;        private readonly IMapper _mapper;        public List<CompanyDTO> CompanyDTOs;        public HomeController(ICompanyService companyService, IMapper mapper, IFirstCategoryService firstService,            ISecondCategoryService secondService, IThirdCategoryService thirdService, ICountryService countryService,            IStateService stateService, ICityService cityService, ICompanyImageService companyImageService,            ICompanyXAmenityService companyXAmenityService, ICompanyXPaymentService companyXPaymentService,            ICompanyXServiceService companyXServiceService, IReviewService reviewService,            IReviewXCommentService reviewXCommentService)        {            _companyService = companyService;            _mapper = mapper;            _firstService = firstService;            _secondService = secondService;            _thirdService = thirdService;            _countryService = countryService;            _stateService = stateService;            _cityService = cityService;            _companyImageService = companyImageService;            _companyXAmenityService = companyXAmenityService;            _companyXPaymentService = companyXPaymentService;            _companyXServiceService = companyXServiceService;            _reviewService = reviewService;            _reviewXCommentService = reviewXCommentService;        }        public async Task<IActionResult> Index()        {            HomeVM homeVM = new HomeVM();            var response = await _companyService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response != null && response.IsSuccess)            {                homeVM.CompanyList = JsonConvert.DeserializeObject<List<CompanyDTO>>(Convert.ToString(response.Result));            }            var response1 = await _firstService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response1 != null && response1.IsSuccess)            {                homeVM.FirstCategoryList = JsonConvert.DeserializeObject<List<FirstCategoryDTO>>(Convert.ToString(response1.Result));            }            var response2 = await _secondService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response2 != null && response2.IsSuccess)            {                homeVM.SecondCategoryList = JsonConvert.DeserializeObject<List<SecondCategoryDTO>>(Convert.ToString(response2.Result));            }            var response3 = await _thirdService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response3 != null && response3.IsSuccess)            {                homeVM.ThirdCategoryList = JsonConvert.DeserializeObject<List<ThirdCategoryDTO>>(Convert.ToString(response3.Result));            }            return View(homeVM);        }        public async Task<IActionResult> SecondCategory(int firstCategoryId)        {            HomeVM homeVM = new HomeVM();            var response = await _companyService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response != null && response.IsSuccess)            {                homeVM.CompanyList = JsonConvert.DeserializeObject<List<CompanyDTO>>(Convert.ToString(response.Result));            }            var response1 = await _firstService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response1 != null && response1.IsSuccess)            {                homeVM.FirstCategoryList = JsonConvert.DeserializeObject<List<FirstCategoryDTO>>(Convert.ToString(response1.Result));            }            var response2 = await _secondService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response2 != null && response2.IsSuccess)            {                List<SecondCategoryDTO> secondCategories = JsonConvert.DeserializeObject<List<SecondCategoryDTO>>(Convert.ToString(response2.Result));                homeVM.SecondCategoryList = secondCategories.Where(x => x.FirstCategoryId == firstCategoryId).ToList();            }            var response3 = await _thirdService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response3 != null && response3.IsSuccess)            {                homeVM.ThirdCategoryList = JsonConvert.DeserializeObject<List<ThirdCategoryDTO>>(Convert.ToString(response3.Result));            }            if (homeVM.SecondCategoryList.Count > 0)            {                return View(homeVM);            }            else            {                return RedirectToAction("Detail", "Home", new { firstCategoryId });            }        }        public async Task<IActionResult> ThirdCategory(int firstCategoryId, int secondCategoryId)        {            HomeVM homeVM = new HomeVM();            var response = await _companyService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response != null && response.IsSuccess)            {                homeVM.CompanyList = JsonConvert.DeserializeObject<List<CompanyDTO>>(Convert.ToString(response.Result));            }            var response1 = await _firstService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response1 != null && response1.IsSuccess)            {                homeVM.FirstCategoryList = JsonConvert.DeserializeObject<List<FirstCategoryDTO>>(Convert.ToString(response1.Result));            }            var response2 = await _secondService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response2 != null && response2.IsSuccess)            {                List<SecondCategoryDTO> secondCategories = JsonConvert.DeserializeObject<List<SecondCategoryDTO>>(Convert.ToString(response2.Result));                homeVM.SecondCategoryList = secondCategories.Where(x => x.FirstCategoryId == firstCategoryId).ToList();            }            var response3 = await _thirdService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response3 != null && response3.IsSuccess)            {                List<ThirdCategoryDTO> thirdCategories = JsonConvert.DeserializeObject<List<ThirdCategoryDTO>>(Convert.ToString(response3.Result));                homeVM.ThirdCategoryList = thirdCategories.Where(x => x.FirstCategoryId == firstCategoryId && x.SecondCategoryId == secondCategoryId).ToList();            }            if (homeVM.ThirdCategoryList.Count > 0)            {                return View(homeVM);            }            else            {                return RedirectToAction("Detail", "Home", new { firstCategoryId, secondCategoryId });            }        }        public async Task<IActionResult> Detail(int firstCategoryId, int secondCategoryId, int thirdCategoryId)        {            HomeVM homeVM = new HomeVM();            var response = await _companyService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response != null && response.IsSuccess)            {                List<CompanyDTO> companies = JsonConvert.DeserializeObject<List<CompanyDTO>>(Convert.ToString(response.Result));                if (firstCategoryId > 0 && secondCategoryId <= 0 && thirdCategoryId <= 0)                {                    homeVM.CompanyList = companies.Where(x => x.FirstCategoryId == firstCategoryId).ToList();                }                else if (firstCategoryId > 0 && firstCategoryId > 0 && secondCategoryId > 0 && thirdCategoryId <= 0)                {                    homeVM.CompanyList = companies.Where(x => x.FirstCategoryId == firstCategoryId && x.SecondCategoryId == secondCategoryId).ToList();                }                else                {                    homeVM.CompanyList = companies.Where(x => x.FirstCategoryId == firstCategoryId && x.SecondCategoryId == secondCategoryId && x.ThirdCategoryId == thirdCategoryId).ToList();                }            }            return View(homeVM);        }        public async Task<IActionResult> BrifDetail(int companyId)        {            HomeVM homeVM = new HomeVM();            var response = await _companyService.GetAsync<APIResponse>(companyId, HttpContext.Session.GetString(SD.SessionToken));            if (response != null && response.IsSuccess)            {                homeVM.Company = JsonConvert.DeserializeObject<CompanyDTO>(Convert.ToString(response.Result));            }            var response1 = await _companyImageService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response1 != null && response1.IsSuccess)            {                List<CompanyImageDTO> companyImages = JsonConvert.DeserializeObject<List<CompanyImageDTO>>(Convert.ToString(response1.Result));                homeVM.CompanyImageList = companyImages.Where(x => x.CompanyId == companyId).ToList();            }            var response2 = await _companyXAmenityService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response2 != null && response2.IsSuccess)            {                List<CompanyXAmenityDTO> companyXAmenities = JsonConvert.DeserializeObject<List<CompanyXAmenityDTO>>(Convert.ToString(response2.Result));                homeVM.AmenityList = companyXAmenities.Where(x => x.CompanyId == companyId).ToList();            }            var response3 = await _companyXPaymentService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response3 != null && response3.IsSuccess)            {                List<CompanyXPaymentDTO> companyXPayments = JsonConvert.DeserializeObject<List<CompanyXPaymentDTO>>(Convert.ToString(response3.Result));                homeVM.PaymentList = companyXPayments.Where(x => x.CompanyId == companyId).ToList();            }            var response4 = await _companyXServiceService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response4 != null && response4.IsSuccess)            {                List<CompanyXServiceDTO> companyXServices = JsonConvert.DeserializeObject<List<CompanyXServiceDTO>>(Convert.ToString(response4.Result));                homeVM.ServiceList = companyXServices.Where(x => x.CompanyId == companyId).ToList();            }            var response5 = await _reviewService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response5 != null && response5.IsSuccess)            {                List<ReviewDTO> reviewServices = JsonConvert.DeserializeObject<List<ReviewDTO>>(Convert.ToString(response5.Result));                homeVM.ReviewList = reviewServices.Where(x => x.CompanyID == companyId).ToList();            }



            var ReviewXcommentList = await _reviewXCommentService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));
            if (ReviewXcommentList != null && ReviewXcommentList.IsSuccess)
            {
                var reviewList = JsonConvert.DeserializeObject<List<ReviewXCommentDTO>>(Convert.ToString(ReviewXcommentList.Result));
                homeVM.ReviewXCommentList = reviewList.OrderByDescending(p => p.Id).ToList(); 

            }            return View(homeVM);        }


      
    // Search bar
    [HttpPost]        public async Task<IActionResult> Search(string searchText)        {
            // Perform search and populate the view model
            var viewModel = await GetSearchResults(searchText);            return View("Searchindex", viewModel);        }        private async Task<HomeVM> GetSearchResults(string searchText)        {            var viewModel = new HomeVM();            if (!string.IsNullOrEmpty(searchText))            {                var companyListResponse = await _companyService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));                if (companyListResponse != null && companyListResponse.IsSuccess)                {                    var companyDTOList = JsonConvert.DeserializeObject<List<CompanyDTO>>(Convert.ToString(companyListResponse.Result));                    viewModel.CompanyList = companyDTOList.Where(x => x.CompanyName.Contains(searchText, StringComparison.OrdinalIgnoreCase)                      || x.FirstCategory.FirstCategoryName.Contains(searchText, StringComparison.OrdinalIgnoreCase)                       || x.City.CityName.Contains(searchText, StringComparison.OrdinalIgnoreCase)                          || x.State.StateName.Contains(searchText, StringComparison.OrdinalIgnoreCase)                        || x.Country.CountryName.Contains(searchText, StringComparison.OrdinalIgnoreCase)                    ).ToList();                }

            }            return viewModel;        }

        // search bar with loazy loading
        [HttpPost]        public async Task<IActionResult> CompanySearchByLazyLoading(string searchText)        {            return RedirectToAction("GetSearchCompanyResults", new { searchText = searchText });        }        public async Task<IActionResult> GetSearchCompanyResults(int pageNum, string searchText)        {
            //pageNum = pageNum ?? 0;
            //ViewBag.IsEndOfRecords = false;
            //if (Request.IsAjaxRequest())
            if (pageNum == null)            {                pageNum = 0;            }            ViewBag.IsEndOfRecords = false;            if (Request.Headers["X-Requested-With"] == "XMLHttpRequest")            {                var response = await _companyService.CompanySearchByLazyLoading<APIResponse>(pageNum, searchText, HttpContext.Session.GetString(SD.SessionToken));                if (response != null && response.IsSuccess)                {                    CompanyDTOs = JsonConvert.DeserializeObject<List<CompanyDTO>>(Convert.ToString(response.Result));                }                ViewBag.IsEndOfRecords = (CompanyDTOs.Any());                ViewBag.list = CompanyDTOs;                ViewBag.searchText = searchText;                return PartialView("_CompanySearch", CompanyDTOs);            }            else            {                var response = await _companyService.CompanySearchByLazyLoading<APIResponse>(pageNum, searchText, HttpContext.Session.GetString(SD.SessionToken));                if (response != null && response.IsSuccess)                {                    CompanyDTOs = JsonConvert.DeserializeObject<List<CompanyDTO>>(Convert.ToString(response.Result));                }                else                {
                    TempData["searchText"] = searchText;
                    TempData["error"] = "Search Data DoesNot Exists.";                    return RedirectToAction("Index");                }                ViewBag.TotalNumberProjects = CompanyDTOs.Count;                ViewBag.list = CompanyDTOs;                ViewBag.searchText = searchText;                return View("CompanySearchByLazyLoading", CompanyDTOs);            }        }        public async Task<IActionResult> AllImages(int companyId)        {            HomeVM homeVM = new HomeVM();            var response1 = await _companyImageService.GetAllAsync<APIResponse>(HttpContext.Session.GetString(SD.SessionToken));            if (response1 != null && response1.IsSuccess)            {                List<CompanyImageDTO> companyImages = JsonConvert.DeserializeObject<List<CompanyImageDTO>>(Convert.ToString(response1.Result));                homeVM.CompanyImageList = companyImages.Where(x => x.Company.Id == companyId).ToList();            }            return View(homeVM);        }


        public IActionResult Privacy()        {            return View();        }        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]        public IActionResult Error()        {            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });        }    }

}